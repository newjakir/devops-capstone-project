# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: jakir007-capsp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# PostgreSQL Deployment
# postgres-deployment-fixed.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: jakir007-capsp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: capsp-env-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: capsp-env-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: capsp-env-secret
              key: POSTGRES_PASSWORD
        # â–º tell Postgres to use a clean subâ€‘folder inside the volume
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory:  "1Gi"
            cpu:     "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: jakir007-capsp
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    app: postgres

---
# Backend Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: capsp-backend
  namespace: jakir007-capsp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: capsp-backend
  template:
    metadata:
      labels:
        app: capsp-backend
    spec:
      containers:
        - name: capsp-backend
          image: newjakir/3-tire-back:latest
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: capsp-env-secret
          readinessProbe:
            httpGet:
              path: /login/  # âœ… Make sure this is publicly accessible without auth
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /login/
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 20
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: capsp-backend
  namespace: jakir007-capsp
spec:
  type: ClusterIP  # Use NodePort if LoadBalancer unsupported
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    app: capsp-backend

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: capsp-nginx-ingress
  namespace: jakir007-capsp
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"          # ðŸ‘ˆ enable regex
spec:
  ingressClassName: nginx
  rules:
    - host: fs.jakirdev.com
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: capsp-frontend
                port:
                  number: 80
    - host: finchback.jakirdev.com
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: capsp-backend
                port:
                  number: 8000


